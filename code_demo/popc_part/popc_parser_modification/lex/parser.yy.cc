
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 65
#define YY_END_OF_BUFFER 66
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[319] =
    {   0,
        0,    0,   66,   64,    1,   14,   63,   63,   63,   63,
       63,   64,   64,   52,   63,   64,   63,   64,   64,   63,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   63,    9,   63,    1,   59,
        0,   10,    0,   56,    0,   11,    0,   53,    0,   54,
        0,   52,   37,   61,   58,   60,    0,   62,    0,    0,
        0,   51,    0,   51,   51,   51,   51,   51,   51,   31,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   57,    9,    9,    9,    9,
        0,    0,   10,    0,   11,    0,    0,    0,    0,   54,

        0,    0,   51,   51,   51,   51,   51,   51,   51,   51,
       32,   51,   51,   51,   51,   51,   34,   51,   51,   51,
       51,   51,   51,   51,   51,   51,    9,    7,    9,    0,
       53,   55,    0,    0,   13,    0,   51,   51,   20,   51,
       33,   51,   17,   51,   51,   51,   51,   39,   51,   51,
       51,   51,   40,   51,   51,   29,   41,   51,   51,   51,
        9,    9,    0,    2,   13,    0,    0,   12,   51,   30,
       16,   26,   36,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,    9,    0,    8,    9,    0,
        0,   12,   51,   51,    0,   35,   51,   51,   51,   51,

       22,   51,   51,   28,   27,   51,   51,   51,    8,    8,
        9,    0,    0,   51,   51,   51,   51,   23,   51,   51,
        0,   50,   51,   25,    8,    9,    0,   38,   19,   51,
       15,   51,   21,    0,    0,    0,    0,   51,    9,    9,
        9,    9,    0,   18,   24,    0,    0,    0,    0,    0,
        9,    9,    9,    0,    0,   43,    0,    0,    0,    0,
        0,    0,    9,    9,    9,    0,   46,   45,    0,    0,
        0,    0,    0,    9,    9,    9,    0,   48,    0,   42,
        0,    0,    9,    9,    9,    0,   47,   44,    0,    9,
        9,    9,    0,    3,   49,    9,    9,    9,    9,    9,

        3,    9,    5,    9,    9,    6,    5,    5,    9,    6,
        6,    9,    9,    9,    4,    4,    4,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    4,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   28,   28,   28,   29,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   28,   58,
       59,   60,   61,   62,   63,   64,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    2,    3,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        7,    1,    1,    1,    1,    1,    1,    8,    8,    1,
        1,    1,    1,    8,    1,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        1,    1,    1,    9
    } ;

static yyconst flex_int16_t yy_base[335] =
    {   0,
        0,   58,  816, 1322,   64, 1322,  791,   62, 1322,  804,
       58,  792,   56,   53,  790,  786,  785,  784,   74,   77,
       80,   84,   88,   96,  100,  104,  108,  111,  120,  131,
      115,  122,  127,  101,   83,  745,  128,  157,   94, 1322,
      114, 1322,  134, 1322,   63, 1322,  158,  153,  791,    0,
      783,  154, 1322, 1322, 1322, 1322,  188, 1322,  192,  766,
      195,  149,  779,  164,  165,  170,  174,  179,  178,  183,
      193,  197,  201,  202,  215,  224,  228,  226,  230,  238,
      239,  249,  253,  260,  262, 1322,    0,  249,  297,  746,
      308,  762,  182,  216,  256,  288,  777,  778,  772,    0,

      747,  318,  287,  288,  289,  293,  297,  312,  316,  318,
      325,  337,  327,  341,  351,  355,  349,  364,  370,  359,
      365,  386,  380,  391,  393,  399,  238, 1322,  740,  317,
      749, 1322,  722,  324,  737,  454,  409,  415,  407,  423,
      414,  425,  430,  436,  437,  448,  446,  452,  460,  462,
      467,  471,  461,  486,  490,  476,  495,  497,  499,  501,
      326,  715,  702, 1322,  730,  726,  556,    0,  508,  509,
      513,  520,  568,  527,  531,  538,  539,  543,  549,  561,
      550,  554,  572,  562,  577,  330,  738,    0,  695,  702,
      617,    0,  586,  587,  632, 1322,  588,  596,  611,  601,

      602,  623,  666,  609,  624,  630,  638,  648,    0,    0,
      698,  690,  686,  649,  660,  670,  656,  661,  671,  679,
      716,  685,  686,  692,    0,  727,  659,  693,  700,  719,
      725,  726,  730,  657,  626,  623,  629,  785,  730,  593,
      567,  564,  535,  737,  748,  532,  483,  485,  475,  792,
      460,  454,  442,  435,  421, 1322,  427,  388,  395,  383,
      378,  382,  357,  352,  349,  383, 1322, 1322,  321,  331,
      311,  315,  312,  317,  285,  270,  270, 1322,  254, 1322,
      261,  244,  210,  199,  157,  205, 1322, 1322,  149,  406,
      167,  416,  150,    0, 1322,  461,  844,  100,  516,  902,

        0,    0,  960,   90,    0, 1018,  123,    0,  624,  113,
        0,  658, 1076,    0, 1134,   69,    0, 1322, 1194, 1203,
     1211, 1219, 1228, 1237, 1245, 1249, 1256, 1264, 1268, 1276,
     1285, 1294, 1303, 1312
    } ;

static yyconst flex_int16_t yy_def[335] =
    {   0,
      318,    1,  318,  318,  318,  318,  318,  319,  318,  318,
      320,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
       30,   30,   30,   30,   30,  318,  322,  318,  318,  318,
      319,  318,  319,  318,  320,  318,  320,  318,  323,  324,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,   30,  318,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  318,  322,  322,  322,  322,
      318,  318,  319,  319,  320,  320,  318,  323,  318,  324,

      318,  325,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  322,  318,  322,  318,
      318,  318,  318,  325,  326,  327,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      328,  322,  318,  318,  326,  318,  327,  329,   30,   30,
       30,   30,  321,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  328,  330,  331,  322,  318,
      325,  329,   30,   30,  318,  318,   30,   30,   30,   30,

       30,   30,  321,   30,   30,   30,   30,   30,  332,  331,
      322,  318,  325,   30,   30,   30,   30,   30,   30,   30,
      318,   30,   30,   30,  332,  322,  318,   30,   30,   30,
       30,   30,   30,  318,  318,  318,  318,  321,  322,  322,
      322,  322,  318,   30,   30,  318,  318,  318,  318,  318,
      322,  322,  322,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  322,  322,  322,  318,  318,  318,  318,  318,
      318,  318,  318,  322,  322,  322,  318,  318,  318,  318,
      318,  318,  322,  322,  322,  333,  318,  318,  318,  322,
      322,  322,  333,  334,  318,  322,  322,  322,  322,  322,

      334,  297,  297,  322,  300,  300,  322,  303,  322,  322,
      306,  322,  322,  313,  313,  322,  315,    0,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318
    } ;

static yyconst flex_int16_t yy_nxt[1387] =
    {   0,
        4,    5,    5,    6,    7,    8,    9,    9,    9,   10,
       11,    9,    9,    9,    9,    9,    9,   12,   13,   14,
       15,    9,   16,   17,   18,   19,   20,   21,   21,    9,
        4,    9,    9,   22,    9,   23,   21,   24,   21,   25,
       21,   21,   21,   26,   21,   21,   21,   27,   28,   29,
       30,   21,   31,   32,   33,   34,   35,   21,   21,   21,
        9,   36,    9,    9,   37,   39,   39,   42,   46,   49,
       51,  316,   52,   46,   50,   57,   57,   57,   59,   59,
       59,   61,   61,   61,   38,   61,   61,   61,   47,   61,
       61,   61,   43,   47,   58,   39,   39,   61,   61,   61,

       63,   61,   61,   61,   63,   61,   61,   61,   63,   61,
       61,   61,   61,   61,   61,  310,   63,   64,   62,   42,
       63,   61,   61,   61,   63,  307,   85,   60,   63,  309,
       88,   63,   61,   61,   61,   62,   62,  304,   62,   93,
       63,   65,   67,   66,   43,   68,   72,   89,   69,   84,
       62,   63,   70,   62,   77,  294,   62,   62,   91,   91,
       91,   78,   62,   71,   94,   79,   74,   62,   95,   82,
       62,   51,   48,   52,   62,   73,   80,   62,   90,   62,
       81,   97,   62,   75,   62,   83,   76,   42,   96,   57,
       57,   57,   97,   59,   59,   59,   61,   61,   61,   62,

       62,   62,  298,  295,   62,   62,  103,   92,   58,  106,
      294,  292,   43,   62,   62,   63,   62,   62,   62,   62,
       62,   93,   62,  104,  105,   62,   62,  107,   62,   62,
       62,   62,   62,  108,   62,   62,   62,   62,   62,  291,
      127,  128,   60,  161,  110,   62,   94,  109,   62,   62,
       62,   88,   62,   62,  112,  111,   62,   62,  113,   62,
      115,   62,  290,   62,  114,   62,   46,   62,   89,  116,
       62,  118,  277,  120,   62,  286,   62,  117,   62,   62,
       62,   62,   62,   62,   62,   62,   47,  122,   62,  119,
      121,   62,  123,   62,   62,   62,  289,   62,   95,  127,

      128,   62,  288,  124,   62,   62,  287,  285,   62,   91,
       91,   91,   62,  125,  126,   62,   89,   62,   96,  134,
      134,  134,   62,   62,   62,  134,  134,  134,   62,  187,
      137,  188,   62,  187,  141,  188,  138,  284,  139,   62,
       62,   62,   62,   62,   62,   62,  140,   62,   62,   62,
      142,   62,   62,   62,  133,  144,  283,  145,   92,  143,
       62,  282,   62,  281,   62,  280,  279,   62,   62,  163,
       62,   62,   62,   62,  146,  278,   62,   62,  148,   62,
       62,  136,   62,  147,   62,  277,   62,  136,  276,   62,
       62,  275,   62,   62,   62,  149,   62,  150,  151,   62,

       62,   62,  274,   62,   62,   62,   62,   62,  296,  153,
       62,   62,  152,  154,   62,   62,   62,   62,  299,   62,
      155,   62,   62,  156,  273,   62,   62,  272,   62,  297,
      158,  271,   62,  157,   62,   62,  159,  270,   62,  300,
      269,   62,   62,   62,   62,   62,   62,  169,   62,   62,
       62,   62,  170,  160,   62,  167,  167,  167,   62,   62,
       62,   62,   62,  296,   62,   62,   62,   62,  268,   62,
       62,   62,   62,  267,  266,   62,  171,   62,   62,  172,
       62,  176,   62,   62,  297,   62,  265,   62,   62,   62,
      174,   62,   62,  173,  175,   62,   62,   62,   62,  177,

       62,   62,   62,   62,   62,  178,   62,   62,  264,  263,
      180,   62,   62,   62,   62,   62,   62,   62,  299,   62,
      179,   62,   62,   62,  258,   62,   62,  182,   62,  181,
       62,   62,   62,  257,   62,  183,   62,  256,   62,  300,
      184,   62,   62,   62,   62,   62,  193,   62,   62,   62,
       62,   62,   62,   62,   62,   62,  185,  167,  167,  167,
       62,   62,   62,   62,   62,   62,  198,  255,  194,  195,
      195,  195,   62,   62,   62,   62,  200,  197,   62,   62,
      201,  254,   62,   62,   62,   62,   62,  204,   63,   62,
       62,   62,  199,   62,   62,   62,   62,   62,   62,  203,

      253,   62,   62,  202,   62,   62,   62,   62,  205,   62,
      207,  206,  208,   62,   62,  252,   62,   62,  213,  213,
      213,   62,   62,  216,   62,  214,  312,   62,  196,   62,
      215,   62,   62,  195,  195,  195,   62,   62,   62,   62,
       62,   62,   62,   62,   62,  251,   62,  313,   62,  217,
      218,   62,   63,   62,   62,  219,   62,   62,   62,   62,
      312,   62,  220,   62,   62,   62,   62,  221,  221,  221,
      222,  249,  248,   62,  247,   62,   62,  223,   62,   62,
      318,  313,   62,   62,   62,   62,   63,  213,  213,  213,
       62,   62,  196,   62,  224,   62,   62,  228,  229,  246,

       62,   62,  243,   62,   62,   62,   62,  230,   62,  231,
      232,   62,   62,   62,   62,   62,   62,  221,  221,  221,
       62,   62,   62,   62,  238,   62,   62,   62,   62,  239,
      227,  233,  239,  226,   62,   62,   63,   62,   62,  212,
       62,   62,  211,  209,   62,   62,  191,   62,   62,  318,
      166,  190,   62,  234,   62,   62,  189,  166,  244,  235,
       62,   62,  236,  240,  245,   62,  240,  164,  131,  237,
      241,   62,   62,  241,   62,  162,  242,   62,   62,  242,
       62,   62,   62,   62,  133,   62,  250,  250,  250,   62,
      132,   99,   62,  250,  250,  250,  131,  130,  129,  102,

       62,  101,   48,   62,   99,   63,   86,   56,   55,   54,
       53,   48,   63,   44,   40,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  259,
      318,  318,  318,  318,  318,  260,  318,  318,  261,  318,
      318,  318,  318,  318,  318,  262,  302,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  303,  303,  318,  318,  318,  318,  303,  318,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,

      303,  303,  303,  303,  305,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  306,
      306,  318,  318,  318,  318,  306,  318,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  307,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  308,
      318,  318,  318,  318,  318,  318,  318,  308,  308,  318,
      318,  318,  318,  308,  318,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      310,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  311,  318,  318,
      318,  318,  318,  318,  318,  311,  311,  318,  318,  318,
      318,  311,  318,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  314,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  315,  315,  318,  318,  318,  318,  315,
      318,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  316,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  317,  318,  318,  318,  318,  318,  318,
      318,  317,  317,  318,  318,  318,  318,  317,  318,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   45,   45,   45,  318,   45,   45,   45,
       45,   45,   62,   62,  318,  318,   62,   62,   62,   87,
       87,  318,   87,   87,   87,   87,   87,   87,   98,   98,
       98,  318,  318,   98,   98,   98,   98,  100,  100,  318,
      100,  100,  100,  100,  100,  100,  135,  135,  318,  318,
      318,  318,  135,  135,  165,  165,  165,  168,  168,  318,
      318,  318,  318,  168,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  192,  318,  192,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  210,  210,  318,  210,  210,
      210,  210,  210,  210,  225,  225,  318,  225,  225,  225,

      225,  225,  225,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  301,  301,  318,  301,  301,  301,  301,  301,
      301,    3,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318
    } ;

static yyconst flex_int16_t yy_chk[1387] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    5,    5,    8,   11,   13,
       14,  316,   14,   45,   13,   19,   19,   19,   20,   20,
       20,   21,   21,   21,    2,   22,   22,   22,   11,   23,
       23,   23,    8,   45,   19,   39,   39,   24,   24,   24,

       21,   25,   25,   25,   22,   26,   26,   26,   23,   27,
       27,   27,   28,   28,   28,  310,   24,   22,   35,   41,
       25,   29,   29,   29,   26,  307,   35,   20,   27,  304,
       37,   28,   30,   30,   30,   35,   34,  298,   35,   43,
       29,   23,   24,   23,   41,   24,   28,   37,   25,   34,
       31,   30,   26,   34,   31,  293,   34,   32,   38,   38,
       38,   32,   33,   27,   43,   32,   30,   31,   47,   33,
       31,   52,   48,   52,   32,   29,   32,   32,   37,   33,
       32,   48,   33,   30,   62,   33,   30,   93,   47,   57,
       57,   57,   48,   59,   59,   59,   61,   61,   61,   64,

       65,   62,  291,  289,   62,   66,   64,   38,   57,   67,
      286,  285,   93,   69,   68,   61,   64,   65,   70,   64,
       65,   94,   66,   65,   66,   66,   67,   68,   71,   67,
       69,   68,   72,   69,   68,   70,   73,   74,   70,  284,
      127,  127,   59,  127,   72,   71,   94,   71,   71,   72,
       75,   88,   72,   73,   74,   73,   73,   74,   75,   76,
       76,   78,  283,   77,   75,   79,   95,   75,   88,   77,
       75,   79,  277,   80,   81,  277,   76,   78,   78,   76,
       77,   78,   79,   77,   82,   79,   95,   81,   83,   79,
       80,   81,   82,   80,   81,   84,  282,   85,   96,   89,

       89,   82,  281,   83,   82,   83,  279,  276,   83,   91,
       91,   91,   84,   84,   85,   84,   89,   85,   96,  102,
      102,  102,  103,  104,  105,  134,  134,  134,  106,  161,
      103,  161,  107,  186,  107,  186,  104,  275,  105,  103,
      104,  105,  103,  104,  105,  106,  106,  108,  106,  107,
      107,  109,  107,  110,  130,  109,  274,  110,   91,  108,
      111,  273,  113,  272,  108,  271,  270,  108,  109,  130,
      110,  109,  112,  110,  112,  269,  114,  111,  114,  113,
      111,  102,  113,  113,  117,  266,  115,  134,  265,  112,
      116,  264,  112,  114,  120,  114,  114,  115,  116,  118,

      121,  117,  263,  115,  117,  119,  115,  116,  290,  119,
      116,  120,  118,  120,  120,  123,  118,  121,  292,  118,
      121,  122,  119,  122,  262,  119,  124,  261,  125,  290,
      124,  260,  123,  123,  126,  123,  125,  259,  122,  292,
      258,  122,  139,  124,  137,  125,  124,  137,  125,  141,
      138,  126,  138,  126,  126,  136,  136,  136,  140,  139,
      142,  137,  139,  296,  137,  143,  141,  138,  257,  141,
      138,  144,  145,  255,  254,  140,  140,  142,  140,  142,
      142,  147,  143,  146,  296,  143,  253,  148,  144,  145,
      145,  144,  145,  144,  146,  149,  153,  150,  147,  149,

      146,  147,  151,  146,  148,  150,  152,  148,  252,  251,
      152,  156,  149,  153,  150,  149,  153,  150,  299,  151,
      151,  154,  151,  152,  249,  155,  152,  155,  156,  154,
      157,  156,  158,  248,  159,  158,  160,  247,  154,  299,
      159,  154,  155,  169,  170,  155,  169,  157,  171,  158,
      157,  159,  158,  160,  159,  172,  160,  167,  167,  167,
      169,  170,  174,  169,  170,  171,  175,  246,  171,  173,
      173,  173,  172,  176,  177,  172,  177,  174,  178,  174,
      178,  243,  174,  175,  179,  181,  175,  181,  173,  182,
      176,  177,  176,  176,  177,  178,  180,  184,  178,  180,

      242,  179,  181,  179,  179,  181,  182,  183,  182,  182,
      184,  183,  185,  180,  184,  241,  180,  184,  191,  191,
      191,  193,  194,  197,  183,  193,  309,  183,  173,  185,
      194,  198,  185,  195,  195,  195,  200,  201,  193,  194,
      197,  193,  194,  197,  204,  240,  199,  309,  198,  198,
      199,  198,  195,  200,  201,  200,  200,  201,  202,  205,
      312,  204,  202,  199,  204,  206,  199,  203,  203,  203,
      206,  237,  236,  207,  235,  202,  205,  207,  202,  205,
      191,  312,  206,  208,  214,  206,  203,  213,  213,  213,
      207,  217,  195,  207,  208,  215,  218,  214,  215,  234,

      208,  214,  227,  208,  214,  216,  219,  216,  217,  217,
      219,  217,  215,  218,  220,  215,  218,  221,  221,  221,
      222,  223,  216,  219,  223,  216,  219,  224,  228,  226,
      212,  220,  239,  211,  220,  229,  221,  222,  223,  190,
      222,  223,  189,  187,  224,  228,  166,  224,  228,  213,
      165,  163,  229,  221,  230,  229,  162,  135,  230,  221,
      231,  232,  221,  226,  232,  233,  239,  133,  131,  221,
      226,  230,  244,  239,  230,  129,  226,  231,  232,  239,
      231,  232,  233,  245,  101,  233,  238,  238,  238,  244,
       99,   98,  244,  250,  250,  250,   97,   92,   90,   63,

      245,   60,   51,  245,   49,  238,   36,   18,   17,   16,
       15,   12,  250,   10,    7,    3,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  250,
        0,    0,    0,    0,    0,  250,    0,    0,  250,    0,
        0,    0,    0,    0,    0,  250,  297,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  297,  297,    0,    0,    0,    0,  297,    0,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  300,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  300,
      300,    0,    0,    0,    0,  300,    0,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  303,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  303,
        0,    0,    0,    0,    0,    0,    0,  303,  303,    0,
        0,    0,    0,  303,    0,  303,  303,  303,  303,  303,

      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      306,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  306,    0,    0,
        0,    0,    0,    0,    0,  306,  306,    0,    0,    0,
        0,  306,    0,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  313,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  313,  313,    0,    0,    0,    0,  313,
        0,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  315,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  315,    0,    0,    0,    0,    0,    0,
        0,  315,  315,    0,    0,    0,    0,  315,    0,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  319,  319,  319,  319,  319,  319,

      319,  319,  319,  320,  320,  320,    0,  320,  320,  320,
      320,  320,  321,  321,    0,    0,  321,  321,  321,  322,
      322,    0,  322,  322,  322,  322,  322,  322,  323,  323,
      323,    0,    0,  323,  323,  323,  323,  324,  324,    0,
      324,  324,  324,  324,  324,  324,  325,  325,    0,    0,
        0,    0,  325,  325,  326,  326,  326,  327,  327,    0,
        0,    0,    0,  327,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  329,    0,  329,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  331,  331,    0,  331,  331,
      331,  331,  331,  331,  332,  332,    0,  332,  332,  332,

      332,  332,  332,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  334,  334,    0,  334,  334,  334,  334,  334,
      334,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "JSONparserwithinout.lex"
#line 2 "JSONparserwithinout.lex"

#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <ctype.h>
#include "parser.tab.h"
#include "parser.h"
#include "paroc_utils.h"
#include "debug.h"

  int c;
  int linenumber=0;
  char filename[1024];
  char classname[1024];
  int mutexCount=0;
  int dummyCount=0;

  extern CArrayCharPtr searchpath, sources;
  extern CodeFile *thisCodeFile;

  CArrayChar othercodes(0,32536);
  bool insideClass;
  int startPos=-1;

  /*
#if !defined (YYSTYPE)
#define YYSTYPE long
#endif
  */

  extern YYSTYPE yylval;
  extern char token[];
  extern int yylex(void);

  char tokenbuf[32000];
  char *tokenpos;

  int  PutToken(char *str);
  int PutToken(char chr);
  char *GetToken(int yyval);
  int CountLine(char *str);
  bool IsSystemHeader(char *fname);

  int ReadUntil(char *sep, char *output, int sz);
   
#line 918 "lex.yy.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 59 "JSONparserwithinout.lex"


#line 1111 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 319 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1322 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 61 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
};
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 65 "JSONparserwithinout.lex"
{
  startPos=othercodes.GetSize();
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return PACK_KEYWORD;
};
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 71 "JSONparserwithinout.lex"
{
  char *t1, *t2;
  t1=strchr(yytext,'"');
  if (t1!=NULL)
    {
      t1++;
      t2=strrchr(t1,'"');
      if (t2!=NULL)
	{
	  *t2=0;
	  strcpy(filename,t1);
	  thisCodeFile->SetFileName(filename); 
	  *t2='"';
	}
    }
  //  printf("LINE DIRECTIVE:line:%d in %s\n", linenumber,filename);
};
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "JSONparserwithinout.lex"
{
  char *t=strchr(yytext,'=');
  t++;
  while (isspace(*t)) t++;
  sscanf(t,"%[A-z0-9_]*)",Class::interface_base);

};
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "JSONparserwithinout.lex"
{
  char *t=strchr(yytext,'=');
  t++;
  while (isspace(*t)) t++;
  sscanf(t,"%[A-z0-9_]*)",Class::broker_base);
};
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 103 "JSONparserwithinout.lex"
{
  char *t=strchr(yytext,'=');
  t++;
  while (isspace(*t)) t++;
  sscanf(t,"%[A-z0-9_]*)",Class::object_base);
};
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 113 "JSONparserwithinout.lex"
{
  char *t1, *t2;
  sscanf(yytext+1, "%d", &linenumber);
  linenumber++;
  //  printf("LINE DIRECTIVE:line:%d in %s\n", linenumber,filename);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  //  yylval=PutToken(yytext);
  //  return DIRECTIVE;  
};
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 123 "JSONparserwithinout.lex"
{
  char *t1, *t2;
  sscanf(yytext+1, "%d", &linenumber);
  t1=strchr(yytext,'"');
  if (t1!=NULL)
    {
      t1++;
      t2=strchr(t1,'"');
      if (t2!=NULL)
	{
	  *t2=0;
	  strcpy(filename,t1);
	  if (thisCodeFile->GetFileName()==NULL) thisCodeFile->SetFileName(filename); 
	  *t2='"';
	}
    }
  //  printf("LINE DIRECTIVE:line:%d in %s\n", linenumber,filename);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  //  yylval=PutToken(yytext);
  //  return DIRECTIVE;  
};
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  //  yylval=PutToken(yytext);
  //  return DIRECTIVE;  
};
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 151 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  linenumber+=CountLine(yytext);

  yylval=PutToken(yytext);
  return STRING;

};
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 160 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  linenumber+=CountLine(yytext);

  yylval=PutToken(yytext);
  return STRING;
};
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 169 "JSONparserwithinout.lex"
{
  char clname[256];
  char methname[256];

  int len=0;
  char *tmp=yytext;
  while (!isspace(*tmp) && *tmp!=':') 
    {
      clname[len]=*tmp;
      classname[len]=*tmp;
      tmp++;
      len++;
    }
  clname[len]=0;
  classname[len]=0;
  
 if (thisCodeFile->FindClass(clname)!=NULL)
    {
      while (isspace(*tmp) || *tmp==':') tmp++;
      bool constructor=paroc_utils::isEqual(clname,tmp);
      
      char postfix[32]="__parocobj";
      int len=strlen(clname);
      int len1=strlen(postfix);
      othercodes.InsertAt(-1,clname,len);
      othercodes.InsertAt(-1,postfix,len1);
      othercodes.InsertAt(-1,yytext+len,strlen(yytext)-len);
      othercodes.InsertAt(-1,postfix,len1);
    }
  else
    {
      othercodes.InsertAt(-1,yytext,strlen(yytext));
    }
  linenumber+=CountLine(tmp);
};
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 205 "JSONparserwithinout.lex"
{
  char clname[256];
  char methname[256];
  bool shouldreturn=true;
  char newyytext[1024];
  char thisBuf[1024];

  int len=0;
  char *tmp=yytext;
  while (!isspace(*tmp) && *tmp!=':') 
    {
      clname[len]=*tmp;
      classname[len]=*tmp;
      tmp++;
      len++;
    }
  clname[len]=0;
  classname[len]=0;
  
  //  printf("Method of class [%s]\n",clname);

  //modify from here, by Yao
  char getname[]="gather";
  char setname[]="broadcast";
  //modify, by Yao

  if (thisCodeFile->FindClass(clname)!=NULL)
    {
      while (isspace(*tmp) || *tmp==':') tmp++;
      bool constructor=paroc_utils::isEqual(clname,tmp);
      //modify, by Yao
      bool sensorget=paroc_utils::isEqual(getname,tmp);
      bool sensorset=paroc_utils::isEqual(setname,tmp);
      //modify, by Yao

      sprintf(newyytext,"%s__parocobj%s",clname,yytext+len);
      othercodes.InsertAt(-1,newyytext,strlen(newyytext));
      //Create the string to be inserted in every paroc_object constructor
      sprintf(thisBuf, "__POPThis_%s = new %s(GetAccessPointForThis());", clname, clname);
	
      

      if (constructor)
	{
	  shouldreturn=false;
	  char postfix[]="__parocobj";
	  int len1=strlen(postfix);
	  othercodes.InsertAt(-1,postfix,len1);

	  char buf[10240];
	  int n=ReadUntil((char*)");{", buf, 10240);
	  othercodes.InsertAt(-1,buf,n);
    

	  linenumber+=CountLine(buf);
	  if (n && buf[n-1]==')'){
	     n=ReadUntil((char*)":;{", buf, 10240);
	     othercodes.InsertAt(-1,buf,n);
	     linenumber+=CountLine(buf);
     }
	  if (n && buf[n-1]==':'){
	      while (1)
		{
		  //extract base class name
		  n=ReadUntil((char*)"({;",buf,10240);
		  if (!n) break;

		  linenumber+=CountLine(buf);
		  if (buf[n-1]!='(')
		    {
		      fprintf(stderr, "ERROR: %s:%d: Bad base class initialization\n",filename, linenumber);
		      exit(1);
		    }
		  sscanf(buf," %[_a-zA-Z0-9]",clname);

		  if (thisCodeFile->FindClass(clname)!=NULL)
		    {
		      char *t=strstr(buf,clname)+ strlen(clname);
		      othercodes.InsertAt(-1,buf,t-buf);
		      othercodes.InsertAt(-1,postfix,len1);
		      othercodes.InsertAt(-1,t,strlen(t));
		    }
		  else othercodes.InsertAt(-1,buf,n);
		  //Extract parametters...
		  
		  n=ReadUntil((char*)"){;",buf,10240);
		  othercodes.InsertAt(-1,buf,n);
		  if (!n || buf[n-1]!=')') break;

		  //Extract separators...
		  n=ReadUntil((char*)",{;",buf,10240);
		  othercodes.InsertAt(-1,buf,n);
		  if (!n || buf[n-1]!=',') break;
		}
	    }
     //Print the THIS handling string line
     othercodes.InsertAt(-1, thisBuf, strlen(thisBuf));
     
	}

    //modify, by Yao
	else if (sensorget)
	{
	char sbuf[10240];
	char ssbuf[1000]="\n  char data[100];\n  sensorcom sobj;\n  sobj.connection();\n  char* JSONData= \"{\\\"function\\\":0}\\n\";\n   sobj.init_sensor(JSONData);\n  JSONData= \"{\\\"function\\\":2}\\n\";\n  sobj.get_data(JSONData,data);\n  JSONData=  \"{\\\"function\\\":1}\\n\";\n  sobj.destroy_object(JSONData);\n  Json::Value root;\n  Json::Reader reader;\n  reader.parse(data, root);\n  std::string tmp=root[\"Infos\"][\"Temperature\"].asString();\n  indata = atof(tmp.c_str());\n";
	char postfixl[]="__parocobj";
	int lene=strlen(postfixl);
	
	  int m=ReadUntil((char*)");{", sbuf, 10240);
	  othercodes.InsertAt(-1,sbuf,m);
    

	  linenumber+=CountLine(sbuf);
	  if (m && sbuf[m-1]==')'){
	     m=ReadUntil((char*)":;{", sbuf, 10240);
	     othercodes.InsertAt(-1,sbuf,m);
	     linenumber+=CountLine(sbuf);
          }
	  if (m && sbuf[m-1]==':'){
	      while (1)
		{
		  //extract base class name
		  m=ReadUntil((char*)"({;",sbuf,10240);
		  if (!m) break;

		  linenumber+=CountLine(sbuf);
		  if (sbuf[m-1]!='(')
		    {
		      fprintf(stderr, "ERROR: %s:%d: Bad base class initialization\n",filename, linenumber);
		      exit(1);
		    }
		  sscanf(sbuf," %[_a-zA-Z0-9]",clname);

		  if (thisCodeFile->FindClass(clname)!=NULL)
		    {
		      char *t=strstr(sbuf,clname)+ strlen(clname);
		      othercodes.InsertAt(-1,sbuf,t-sbuf);
		      othercodes.InsertAt(-1,postfixl,lene);
		      othercodes.InsertAt(-1,t,strlen(t));
		    }
		  else othercodes.InsertAt(-1,sbuf,m);
		  //Extract parametters...
		  
		  m=ReadUntil((char*)"){;",sbuf,10240);
		  othercodes.InsertAt(-1,sbuf,m);
		  if (!m || sbuf[m-1]!=')') break;

		  //Extract separators...
		  m=ReadUntil((char*)",{;",sbuf,10240);
		  othercodes.InsertAt(-1,sbuf,m);
		  if (!m || sbuf[m-1]!=',') break;
		}
	    }
        //Print the THIS handling string line
        othercodes.InsertAt(-1, ssbuf, strlen(ssbuf));
	
	}

        else if (sensorset)
	{
	char sbuf[10240];
	char ssbuf[1000]="\n  int dataout = static_cast<int>(outdata);\n  sensorcom aobj;\n  aobj.connection();\n  char* JSONData=  \"{\\\"function\\\":0}\\n\";\n  aobj.init_sensor(JSONData);\n  std::string setdata;\n  setdata= \"{\\\"function\\\":3, \\\"led\\\":\";\n  char num[5];\n  sprintf(num,\"\%d\",dataout);\n  setdata = setdata+num+\"}\\n\";\n  JSONData = const_cast<char*> (setdata.c_str());\n  aobj.set_data(JSONData);\n  JSONData=  \"{\\\"function\\\":1}\\n\";\n  aobj.destroy_object(JSONData);\n";
	char postfixl[]="__parocobj";
	int lene=strlen(postfixl);
	
	  int m=ReadUntil((char*)");{", sbuf, 10240);
	  othercodes.InsertAt(-1,sbuf,m);
    

	  linenumber+=CountLine(sbuf);
	  if (m && sbuf[m-1]==')'){
	     m=ReadUntil((char*)":;{", sbuf, 10240);
	     othercodes.InsertAt(-1,sbuf,m);
	     linenumber+=CountLine(sbuf);
          }
	  if (m && sbuf[m-1]==':'){
	      while (1)
		{
		  //extract base class name
		  m=ReadUntil((char*)"({;",sbuf,10240);
		  if (!m) break;

		  linenumber+=CountLine(sbuf);
		  if (sbuf[m-1]!='(')
		    {
		      fprintf(stderr, "ERROR: %s:%d: Bad base class initialization\n",filename, linenumber);
		      exit(1);
		    }
		  sscanf(sbuf," %[_a-zA-Z0-9]",clname);

		  if (thisCodeFile->FindClass(clname)!=NULL)
		    {
		      char *t=strstr(sbuf,clname)+ strlen(clname);
		      othercodes.InsertAt(-1,sbuf,t-sbuf);
		      othercodes.InsertAt(-1,postfixl,lene);
		      othercodes.InsertAt(-1,t,strlen(t));
		    }
		  else othercodes.InsertAt(-1,sbuf,m);
		  //Extract parametters...
		  
		  m=ReadUntil((char*)"){;",sbuf,10240);
		  othercodes.InsertAt(-1,sbuf,m);
		  if (!m || sbuf[m-1]!=')') break;

		  //Extract separators...
		  m=ReadUntil((char*)",{;",sbuf,10240);
		  othercodes.InsertAt(-1,sbuf,m);
		  if (!m || sbuf[m-1]!=',') break;
		}
	    }
        //Print the THIS handling string line
        othercodes.InsertAt(-1, ssbuf, strlen(ssbuf));
	
	}

    //modify, by Yao
    }
  else
    {
      strcpy(newyytext,yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
    }
  linenumber+=CountLine(tmp);

  if (shouldreturn)
    {
      yylval=PutToken(newyytext);
      return ID;
    }
};
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 437 "JSONparserwithinout.lex"
{
  linenumber++; 
  othercodes.InsertAt(-1,yytext,strlen(yytext));
};
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 442 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  /*  printf(" class keyword\n");*/
  yylval=PutToken(char(100));
  
  startPos=othercodes.GetSize();
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return PARCLASS_KEYWORD;
};
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 458 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return CLASS_KEYWORD;

};
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 465 "JSONparserwithinout.lex"
{
	yylval=PutToken(yytext);
	othercodes.InsertAt(-1,yytext,strlen(yytext));
	return ENUM;
};
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 471 "JSONparserwithinout.lex"
{
	yylval=PutToken(yytext);
	othercodes.InsertAt(-1,yytext,strlen(yytext));
	return NAMESPACE;
};
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 477 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return CLASSID;
};
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 490 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return AUTO_KEYWORD;
};
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 496 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return REGISTER_KEYWORD;
}; 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 503 "JSONparserwithinout.lex"
{
  if (!insideClass) othercodes.InsertAt(-1,yytext,strlen(yytext));
  return PUBLIC_KEYWORD;
};
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 507 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return PRIVATE_KEYWORD;
};
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 511 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return PROTECTED_KEYWORD;
};
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 517 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return VIRTUAL_KEYWORD;
};
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 522 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return CONST_KEYWORD;
};
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 527 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return STRUCT_KEYWORD;
};
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 532 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return STATIC_KEYWORD;
};
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 537 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }
  else
    {
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return SYNC_INVOKE;
    }
}; 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 552 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return ASYNC_INVOKE;
};
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 564 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return INPUT;
};
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 576 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return OUTPUT;
};
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 588 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return CONCURRENT;
};
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 601 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return SEQUENTIAL;
};
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 613 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      char *yycopy=strdup(yytext+5);
      int len=strlen(yycopy);
      yylval=PutToken((char*)"mutex");
      othercodes.InsertAt(-1,yytext,5);
      for (char *t=yycopy+len-1;t!=yycopy;t--) unput(*t); 
      free(yycopy);
      return ID;
      
      //      othercodes.InsertAt(-1,yytext,strlen(yytext));
    }
  else
    {
      char str[256];
      int len=strlen(yytext)-6;
      sprintf(str," { paroc_mutex_locker _paroc_mutex%d(_paroc_omutex); ",mutexCount++); 
      othercodes.InsertAt(-1,str,strlen(str));
      othercodes.InsertAt(-1,yytext+5,len);
    }
  linenumber+=CountLine(yytext+5);
};
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 637 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return MUTEX;

};
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 650 "JSONparserwithinout.lex"
{

  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return SCOPE;
};
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 656 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return HIDDEN;  
};
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 668 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  yylval=PutToken(char(USERPROC));
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return PROC;
};
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 680 "JSONparserwithinout.lex"
{
  if (IsSystemHeader(filename))
    {
      yylval=PutToken(yytext);
      othercodes.InsertAt(-1,yytext,strlen(yytext));
      return ID;
    }

  yylval=PutToken(char(PARAMSIZE));
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return SIZE;
};
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 693 "JSONparserwithinout.lex"
{

	/* This part of parser is possible source of wrong "this" handling */
	Class *cl = thisCodeFile->FindClass(classname);
	bool insertNormalThis = true;
	
	if (cl!=NULL)
	{
      //If the class is a parclass, replace THIS keyword by the Interface pointer __POPThis_ClassName
      if(cl->IsParClass()){
         othercodes.InsertAt(-1,"__POPThis_", strlen("__POPThis_"));
			othercodes.InsertAt(-1,cl->GetName(),strlen(cl->GetName()));
			insertNormalThis = false;
		}
	}
	
	if(insertNormalThis)
	{
		othercodes.InsertAt(-1,yytext,strlen(yytext));
	}
	
	
	/*
	yylval=PutToken(yytext);
	othercodes.InsertAt(-1,"this",strlen("this"));
 	
	printf("handle at Flex -> ");
	return THIS_KEYWORD;*/
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 723 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  linenumber+=CountLine(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID1);
};
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 730 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  linenumber+=CountLine(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID1);
};
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 737 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  linenumber+=CountLine(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID1);
};
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 744 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  linenumber+=CountLine(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID1);
};
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 751 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  linenumber+=CountLine(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID1);
};
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 758 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  linenumber+=CountLine(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID1);
};
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 766 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  linenumber+=CountLine(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID1);
};
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 773 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  linenumber+=CountLine(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID1);
};
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 780 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(TYPEDEF_KEYWORD);
};
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 785 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));  
  return(ID);
};
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 791 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (INTEGER);
};
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 797 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (REAL);  
};
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 805 "JSONparserwithinout.lex"
;
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 806 "JSONparserwithinout.lex"
{
  linenumber+=CountLine(yytext);
} ;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 810 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (AND_OP);    
};
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 816 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (OR_OP);    
};
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 822 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (EQUAL_OP);    
};
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 828 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (NOTEQUAL_OP);    
};
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 834 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (GREATEREQUAL_OP);    
};
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 840 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (LESSEQUAL_OP);    
};
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 846 "JSONparserwithinout.lex"
{
  yylval=PutToken(yytext);
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return (NONSTRICT_OD_OP);    
};
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 853 "JSONparserwithinout.lex"
{ 
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return yytext[0]; 
};
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 858 "JSONparserwithinout.lex"
{
	return EOFCODE;
};
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 861 "JSONparserwithinout.lex"
{
  othercodes.InsertAt(-1,yytext,strlen(yytext));
  return yytext[0];   
};
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 866 "JSONparserwithinout.lex"
ECHO;
	YY_BREAK
#line 2212 "lex.yy.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 319 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 319 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 318);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 866 "JSONparserwithinout.lex"



int yylex();

int PutToken(char *str)
{
  assert(str!=NULL);
  int len=strlen(str)+1;
  if (tokenpos<tokenbuf || tokenpos+len>=tokenbuf+10000) tokenpos=tokenbuf;
  strcpy(tokenpos,str);
  int ret=tokenpos-tokenbuf;
  tokenpos+=len;
  return ret;
}


int PutToken(char chr)
{
  int len=2;
  if (tokenpos<tokenbuf || tokenpos+len>=tokenbuf+10000) tokenpos=tokenbuf;
  int ret=tokenpos-tokenbuf;

  tokenpos[0]=chr;
  tokenpos[1]=0;
  tokenpos+=2;
  return ret;
}


char *GetToken(int yyval)
{
  assert(yyval>=0 && yyval<10000);
  return (tokenbuf+yyval);
}


int CountLine(char *str)
{
  if (str==NULL) return 0;
  int n=0;
  for (;*str!=0;str++) if (*str=='\n') n++;
  return n;
}

int ReadUntil(char *sep, char *buf, int sz)
{
  if (sz<=1)
    {
      printf("Buffer size (%d) error\n", sz);
      if (sz==1) *buf=0;
      return 0;
    }
 
  char *tmp=buf;
  int ch=1;
  int bracket=0;

  while (strchr(sep,ch)==NULL && ch!=EOF)
    {
      ch=yyinput();
      *tmp=ch;
      tmp++;
      sz--;
      if (sz<=1)
	{
	  *tmp=0;
	  return (tmp-buf);
	}
      if (ch=='"')
	{
	  int n;
	  while ((n=ReadUntil((char*)"\"", tmp,sz))>0 && tmp[n-2]=='\\');
	}
      else if (ch=='\'')
	{
	  int n;
	  while ((n=ReadUntil((char*)"\'", tmp,sz))>0 && tmp[n-2]=='\\');
	}
      else if (ch=='(') bracket++;
      else if (ch==')')
	{
	  bracket--;
	  if (bracket>0) ch=1;
	}
    }
  
  *tmp=0;
  return (tmp-buf);
}


bool IsSystemHeader(char *fname)
{
  char system_header[]="/usr/include";
  if (fname==NULL) return false;
  int len=strlen(fname);

  //  return strcmp(fname+len-2,".h")==0;

  return strncmp(fname,system_header,strlen(system_header))==0;
}


